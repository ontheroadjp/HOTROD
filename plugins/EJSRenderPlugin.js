var path = require('path');
var glob = require('glob');
var fs = require('fs');
var ejs = require('ejs');

function EJSRenderPlugin(options) {
    this.paths = getPaths();
    preGenerate(this.render());
}

function getPaths() {
    var all = glob.sync(path.join(__dirname, '../src/**/*.ejs'));
    return all.filter( function(v) {
        return !v.match('partials/');
    });
}

function preGenerate(results) {
    console.log("Pre-Generate HTML files...");
    results.forEach(function(result) {
        fs.writeFileSync(
            path.join(__dirname, result.key),
            result.content
        );
    });
}

EJSRenderPlugin.prototype.render = function() {
    var results = []

    this.paths.forEach( function(ejsPath) {

        var html = fs.readFileSync( ejsPath, 'utf8');
        html = ejs.render(html, { filename: 'src/partials/' });

        var dist = ejsPath.replace(path.join(__dirname, '../'), '../');
        var key = dist.replace(/\.ejs$/,'.html')

        results.push({
            key: key,
            content: html
        });
    });

    return results;
};

EJSRenderPlugin.prototype.apply = function(compiler) {

    console.log('Start EJS rendering...');
    
    compiler.plugin('emit', function(compilation, callback) {
        var out = '';
        var rootDir = __dirname;
        rootDir = rootDir.replace('/plugins', '');

        // Explore each chunk (build output):
        compilation.chunks.forEach(function(chunk) {
            out += ('// -------------------------------------------------------' + "\n");
            out += ('// chunks\n');
            out += ('// -------------------------------------------------------' + "\n");
            out += ('chunk id: ' + chunk.id + "\n");
            out += ('chunk name: ' + chunk.name + "\n");
            out += ('chunk hash: ' + chunk.hash + "\n");
            out += ('chunk entrypoints: ' + chunk.entrypoints + "\n");

            chunk.files.forEach(function(filename) {
                out += ('output: ' + filename + "\n");
                // Get the asset source for each file generated by the chunk:
                var source = compilation.assets[filename].source();
            });

            out += ("\n");

            // Explore each module within the chunk (built inputs):
            chunk.modules.forEach(function(module) {
                out += ('module:\t\t\t\t' + module.context.replace(rootDir, '') + "\n");

                // Explore each source file path that was included into the module:
                if( module.fileDependencies ) {
                    module.fileDependencies.forEach(function(filepath) {
                        out += ('fileDependencies:\t' + filepath.replace(rootDir, '') + "\n");
                        // we've learned a lot about the source structure now...
                    });
                }

                out += ("\n");
            });


            fs.writeFileSync(path.join(__dirname, '../stats/chanks.txt'), out);
        });

        callback();
    });

//    var self = this;
//
//    compiler.plugin('emit', function (compilation, callback) {
//    //compiler.plugin('compilation', function (compilation) {
//
//        var results = self.render();
//
//        results.forEach(function(result) {
//            compilation.assets[result.key] = {
//                source: function() {
//                    return result.content;
//                },
//                size: function() {
//                    return result.content.length;
//                }
//            };
//        });
//
//        callback();
//    });
}

module.exports = EJSRenderPlugin;
